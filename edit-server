#!/usr/bin/env python
# Copyright (C) 2009  David Hilley <davidhi@cc.gatech.edu>,
# Tim Cuthbertson <gfxmonk.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
import cgi, urlparse
import subprocess
import tempfile, time
import os, sys, re
import stat
import shlex
import socket
from optparse import OptionParser
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from SocketServer import ThreadingMixIn
import threading
import logging
import time
logging.basicConfig(level=logging.DEBUG, format="%(levelname)s: %(message)s [%(threadName)s@%(asctime)s]")

open_cmd = shlex.split(os.environ.get('EDIT_SERVER_EDITOR', 'gvim -f'), comments=False)
os.environ['FROM_EDIT_SERVER'] = 'true'

processes = {}
INCREMENTAL = True
delay_in_minutes = 5
SYSTEMD_FIRST_SOCKET_FD = 3
TEMP_DIR = None

class HttpError(RuntimeError):
	pass

class Editor(object):
	def __init__(self, filename, process):
		self.process = process
		self.returncode = None
		self.filename = filename
	
	@property
	def still_open(self):
		return self.returncode is None
	
	@property
	def success(self):
		return self.still_open or self.returncode == 0
	
	@property
	def finished(self):
		return self.returncode is not None

	@property
	def error(self):
		if self.returncode > 0:
			return 'text editor returned %d' % self.returncode
		elif self.returncode < 0:
			return 'text editor died on signal %d' % -(self.returncode)
	
	@property
	def contents(self):
		with open(self.filename, 'r') as f:
			return f.read()

	def wait_for_edit(self):
		if not INCREMENTAL:
			self.returncode = self.process.wait()
			del processes[self.filename]
			return
		last_mod_time = os.stat(self.filename)[stat.ST_MTIME]
		while (True):
			time.sleep(1)
			self.returncode = self.process.poll()
			if self.finished:
				del processes[self.filename]
				return
			mod_time = os.stat(self.filename)[stat.ST_MTIME]
			if mod_time != last_mod_time:
				logging.info("new mod time: %s, last: %s" % (mod_time, last_mod_time))
				last_mod_time = mod_time
				return


class Handler(BaseHTTPRequestHandler):
	def do_GET(self):
		if self.path == '/status':
				self.send_response(200)
				self.send_header('Content-Type', 'text/plain; charset=utf-8')
				self.end_headers()
				self.wfile.write('edit-server is running.\n')
				return
		self.send_error(404, "GET Not Found: %s" % self.path)

	def _get_editor(self, contents):
		logging.debug("processes: %r" % (processes,))
		filename = self.headers.getheader("x-file")
		if filename in ('undefined', 'null'): filename = None # that's not very pythonic, is it chaps?
		if filename is not None:
			logging.debug("reusing editor for file: %s" % (filename,))
			process = processes[filename]
		else:
			prefix = "chrome_"
			f = tempfile.NamedTemporaryFile(delete=False, prefix=prefix, suffix='.txt', dir=TEMP_DIR)
			filename = f.name
			f.write(contents)
			f.close()
			# spawn editor...
			cmd = open_cmd + [filename]
			logging.info("Spawning editor: %r" % (cmd,))
			process = subprocess.Popen(cmd, close_fds=True)
			processes[filename] = process
		return Editor(filename, process)
	
	def _wait_for_edited_contents(self, editor):
		editor.wait_for_edit()

		if editor.success:
			return editor.contents
		else:
			raise HttpError(404, editor.error)
	
	def _respond(self, contents, editor):
		self.send_response(200)
		self.send_header('x-open', str(editor.still_open).lower())
		if editor.still_open:
			self.send_header('x-file', editor.filename)
		self.end_headers()
		self.wfile.write(contents)

	def _delayed_remove(self, filename):
		def delayed_remove():
			logging.debug("sleeping %s mins" % (delay_in_minutes,))
			time.sleep(delay_in_minutes * 60)
			logging.debug("removing file: %s" % (filename,))
			try:
				os.unlink(filename)
			except :
				logging.error("Unable to unlink: %s" % (filename, ))
		thread = threading.Thread(target=delayed_remove)
		thread.daemon = True
		thread.start()

	def do_POST(self):
		try:
			logging.info(" --- new request --- ")
			logging.debug("there are %s active editors" % (len(processes),))
			content_length = self.headers.getheader('content-length')
			if content_length is None:
				self.send_response(411)
				self.end_headers()
				return
			content_length = int(content_length)
			body = self.rfile.read(content_length)
			editor = self._get_editor(body)
			contents = self._wait_for_edited_contents(editor)
			self._respond(contents=contents, editor=editor)
			if editor.finished:
				self._delayed_remove(editor.filename)
		except HttpError, e:
			self.send_error(*e.args)
		except Exception, e:
			logging.exception("%s: %s" % (type(e).__name__, e,))
			self.send_error(404, "Not Found: %s" % self.path)
		logging.debug("POST complete")

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
	pass

class SocketInheritingHTTPServer(ThreadedHTTPServer):
	"""A HttpServer subclass that takes over an inherited socket from systemd"""
	def __init__(self, address_info, handler, fd, bind_and_activate=True):
		ThreadedHTTPServer.__init__(self, address_info, handler, bind_and_activate=False)
		self.socket = socket.fromfd(fd, self.address_family, self.socket_type)
		if bind_and_activate:
			# NOTE: systemd provides ready-bound sockets, so we only need to activate:
			self.server_activate()

def main():
	global delay_in_minutes, INCREMENTAL, open_cmd, TEMP_DIR
	try:
		parser = OptionParser("usage: %prog [OPTIONS] <edit-cmd>")
		parser.add_option("-p", "--port", default=9292, type="int")
		parser.add_option("-d", "--delay", help="delay (in minutes) before deleting unused files", default=5)
		parser.add_option("--tempdir", default=os.environ.get("EDIT_SERVER_TEMP", None), help="location of temporary files (defaults to /tmp, or $EDIT_SERVER_TEMP if defined)")
		parser.add_option("--no-incremental", help="disable incremental edits (a request will block until editor is finished)", default=True, dest='incremental', action='store_false')
		opts, args = parser.parse_args()
		port = opts.port
		delay_in_minutes = opts.delay
		INCREMENTAL = opts.incremental
		TEMP_DIR = opts.tempdir
		if args:
			open_cmd = args

		logging.info('edit-server PID is %s' % (os.getpid(),))
		server_args = [('localhost', int(port)), Handler]
		if os.environ.get('LISTEN_PID', None) == str(os.getpid()):
			httpserv = SocketInheritingHTTPServer(*server_args, fd=SYSTEMD_FIRST_SOCKET_FD)
			logging.info('edit-server started on socket fd %s' % (SYSTEMD_FIRST_SOCKET_FD,))
		else:
			httpserv = ThreadedHTTPServer(*server_args)
			logging.info('edit-server started on port %s' % (port,))
		httpserv.table = {}
		httpserv.serve_forever()
	except KeyboardInterrupt:
		httpserv.socket.close()

if __name__ == '__main__':
	main()


